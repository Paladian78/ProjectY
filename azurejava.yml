# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- javaapp
resources:
- repo: self
variables:
  dockerfilePath: '$(Build.SourcesDirectory)/src/Dockerfile'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  vmImageName: 'windows-latest'

stages:
- stage: Build
  displayName: Build and publish Java container
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    variables:
    - group: Release
    steps:
    - task: Maven@3
      displayName: 'Maven pom.xml'
      inputs:
        options: '-DskipITs --settings ./maven/settings.xml'
        publishJUnitResults: false
    # - task: Maven@3
    #   displayName: 'Maven Package'
    #   inputs:
    #     mavenPomFile: 'pom.xml'
    - task: CopyFiles@2
      displayName: Copy WAR file to staging directory
      inputs:
        sourceFolder: '$(build.sourcesdirectory)'
        contents: |
          target/myshuttledev*.war
          *.sql
        targetFolder: '$(build.artifactstagingdirectory)'
    # - task: Docker@2
    #   displayName: Build and push Java container image to registry
    #   inputs:
    #     command: buildAndPush
    #     buildContext: '$(build.artifactstagingdirectory)'
    #     repository: $(webRepository)
    #     dockerfile: $(dockerfilePath)
    #     containerRegistry: 'javaContainer'
    #     tags: |
    #       $(tag)
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'javaContainer'
    #     repository: 'ProjectY'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Javaazure connection'
        azureContainerRegistry: '{"loginServer":"javacontainercicd11339.azurecr.io", "id" : "/subscriptions/03951b14-d082-4bfd-b04c-d7512e31610c/resourceGroups/java-containers-cicd-rg/providers/Microsoft.ContainerRegistry/registries/javacontainercicd11339"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'buildAndPush'
    - task: AzureMysqlDeployment@1
      displayName: Run MySQL initialization script
      # inputs:
      #   azureSubscription: 'Azure for Students'
      #   serverName: '$(MySqlServer).mysql.database.azure.com'
      #   databaseName: 'alm'
      #   sqlUsername: $(MySqlUserName)@$(MySqlServer)
      #   sqlPassword: $(MySqlPassword)
      #   sqlFile: '- task: AzureMysqlDeployment@1
      inputs:
        azureSubscription: 'Javaazure connection'
        ServerName: 'java-container-cicd-11339.mysql.database.azure.com'
        DatabaseName: 'alm'
        SqlUsername: 'sysadmin'
        SqlPassword: '$(MySqlPassword)'
        TaskNameSelector: 'SqlTaskFile'
        SqlFile: '$(Build.SourcesDirectory)/CreateMYSQLDB.sql'
        # IpDetectionMethod: 'AutoDetect''

# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: java-container
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebAppContainer@1
#             displayName: Update the web app with the new container
#             inputs:
#               appName: $(WebAppName)
#               azureSubscription: 'Azure Connection'
#               imageName: $(RegistryName)/$(webRepository):$(build.buildId)
#           - task: AzureAppServiceSettings@1
#             displayName: Update web app connection string
#             inputs:
#               azureSubscription: 'Azure Connection'
#               appName: $(WebAppName)
#               resourceGroupName: 'java-containers-cicd-rg'
#               connectionStrings: |
#                 [
#                   {
#                     "name": "MyShuttleDb",
#                     "value": "jdbc:mysql://$(MySqlServer).mysql.database.azure.com:3306/alm?useSSL=true&requireSSL=false&autoReconnect=true&user=$(MySqlUserName)@$(MySqlServer)&password=$(MySqlPassword)",
#                     "type": "MySql",
#                     "slotSetting": false
#                   }
#                 ]
